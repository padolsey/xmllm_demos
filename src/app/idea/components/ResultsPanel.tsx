'use client'

import { AgentConfig, EvaluationResult, Idea } from '../types'
import { ProgressBar } from './results/ProgressBar'
import { IdeaLeaderboard } from './results/IdeaLeaderboard'
import { EvaluationLog } from './results/EvaluationLog'
import { IdeaGraph } from './results/IdeaGraph'
import { Info } from 'lucide-react'

interface ResultsPanelProps {
  isRunning: boolean
  currentIteration: number
  totalIterations: number
  ideas: Idea[]
  evaluationHistory: Array<{
    iteration: number
    agent: AgentConfig
    ideaA: Idea
    ideaB: Idea
    result: EvaluationResult
  }>
  problem: string
}

export default function ResultsPanel({
  isRunning,
  currentIteration,
  totalIterations,
  ideas,
  evaluationHistory,
  problem
}: ResultsPanelProps) {
  return (
    <div className="bg-[hsl(var(--idea-surface))] border border-[hsl(var(--idea-border))] rounded-lg p-6 space-y-6">
      <div className="flex items-center justify-between border-b border-[hsl(var(--idea-border))] pb-4">
        <h2 className="text-lg">Results</h2>
        {isRunning && (
          <div className="text-sm opacity-70">
            Iteration {currentIteration} of {totalIterations}
          </div>
        )}
      </div>

      <ProgressBar 
        current={currentIteration}
        total={totalIterations}
        isRunning={isRunning}
      />

      <div className="p-4 bg-[hsl(var(--idea-bg))] rounded-lg space-y-2">
        <h3 className="text-sm font-medium">Scoring System</h3>
        <div className="text-sm opacity-70">
          <p>Ideas are evaluated through agent comparisons where:</p>
          <ul className="list-disc list-inside pl-2 space-y-1">
            <li>Winning a comparison: +1 point</li>
            <li>Getting vetoed: -0.5 points and counts as a veto strike</li>
            <li>New ideas can be generated by combining existing solutions</li>
          </ul>
        </div>
      </div>

      <div className="grid grid-cols-[2fr,1fr] gap-6">
        <div className="space-y-6">
          <IdeaLeaderboard ideas={ideas} />
          <IdeaGraph ideas={ideas} evaluationHistory={evaluationHistory} />
        </div>
        <EvaluationLog history={evaluationHistory} problem={problem} />
      </div>
    </div>
  )
} 